name: Auto Label by Branch

on:
  pull_request:
    types: [opened, edited, synchronize] 

jobs:
  auto-label:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write

    steps:
      - name: Auto Label PR
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              const pr = context.payload.pull_request;
              const prNumber = pr.number;
              const branchName = pr.head.ref;
              const prTitle = pr.title.toLowerCase();
              const folderLabels = ['ADMIN', 'CDP FE', 'CDP BE', 'API'];
              const newFolderLabels = [];

              console.log(`üîç PR #${prNumber} on branch: ${branchName}`);
              console.log(`üìù Title: ${pr.title}`);

              const { data: files } = await github.rest.pulls.listFiles({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber
              });

              const filenames = files.map(f => f.filename);
              console.log('üìÇ Changed files:', filenames);

              const hasAdminChanges = filenames.some(name => name.startsWith('mmenu-admin/'));
              const hasCdpFEChanges = filenames.some(name => name.startsWith('mmenu-cdp/client/'));
              const hasCdpBEChanges = filenames.some(name => name.startsWith('mmenu-cdp/server/'));
              const hasApiChanges = filenames.some(name => name.startsWith('mmenu-api/'));

              console.log('‚úÖ Folder changes detected:', {
                'ADMIN': hasAdminChanges,
                'CDP FE': hasCdpFEChanges,
                'CDP BE': hasCdpBEChanges,
                'API': hasApiChanges,
              });

              if (hasAdminChanges) newFolderLabels.push('ADMIN');
              if (hasCdpFEChanges) newFolderLabels.push('CDP FE');
              if (hasCdpBEChanges) newFolderLabels.push('CDP BE');
              if (hasApiChanges) newFolderLabels.push('API');

              const { data: currentLabelsData } = await github.rest.issues.listLabelsOnIssue({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber
              });
              const currentLabels = currentLabelsData.map(label => label.name);


              // Lo·∫°i b·ªè label c≈© thu·ªôc nh√≥m folder
              const preservedLabels = currentLabels.filter(label => !folderLabels.includes(label));

              // H·ª£p nh·∫•t v·ªõi label m·ªõi
              const finalLabels = Array.from(new Set([...preservedLabels, ...newFolderLabels]));

              // Set l·∫°i to√†n b·ªô label
              await github.rest.issues.setLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                labels: finalLabels
              });

              console.log(`üè∑Ô∏è Final labels set on PR #${prNumber}: [${finalLabels.join(', ')}]`);
            } catch (error) {
              console.error(`‚ùå Failed to label PR:`, error);
            }